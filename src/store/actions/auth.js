import axios from 'axios';
import * as actionTypes from './actionTypes';


/*
    Actions are consumed by reducer cases. Actions could be 
    created as objects directly or could be generated by action
    creators. Action creators are functions which generate and return
    an object that is expected from a component when that component
    dispatches an action, so these action creators could be used 
    inside mapDispatchToProps.

    Due to <thunk> middleware it is possible to use async code inside
    action creators. These action creators will not return the action
    to reducer until async logic is completed
*/

/*
    sync action type creators for authentication
*/

export const authStart = () => {
    return {
        type: actionTypes.AUTH_START
    };
};

export const authSuccess = (token, userId) => {
    return {
        type: actionTypes.AUTH_SUCCESS,
        idToken: token,
        userId: userId
    };
};

export const authFail = (error) => {
    return {
        type: actionTypes.AUTH_FAIL,
        error: error
    };
};

export const logout = () => {

    localStorage.removeItem('token');
    localStorage.removeItem('expirationDate');
    localStorage.removeItem('userId');

    return {
        type: actionTypes.AUTH_LOGOUT,
    }
};

export const checkAuthTimeout = (expirationTime) => {
    return dispatch => {
        setTimeout(() => {
            dispatch(logout())
        }, expirationTime * 1000);
    };
};

export const setAuthRedirectPath = (path) => {
    return {
        type: actionTypes.SET_AUTH_REDIRECT_PATH,
        path: path
    }
};

export const authCheckState = () => {
    return dispatch => {
        const token = localStorage.getItem('token'),
              expirationDate = new Date(localStorage.getItem('expirationDate')),
              userId = localStorage.getItem('userId');
        
        let tokenValid = false;
        if (expirationDate > new Date()) {
            tokenValid = true;
        }
        
        if (tokenValid && token && userId) {
            dispatch(
                authSuccess(token, userId)
            );
            
            dispatch(checkAuthTimeout(
                (expirationDate.getTime() - new Date().getTime()) / 1000
            ));
        } else {
            dispatch(logout());
        }
    }
};


/* 
    async action type creators for making an order
*/

export const auth = (email, password, isSignup) => {

    return dispatch => {
        dispatch(authStart());

        const authData = {
            email: email,
            password: password,
            returnSecureToken: true
        }
        
        let key = '',
            baseUrl = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty',
            url = `${baseUrl}/signupNewUser?key=${key}`;

        if (!isSignup) {
            url = `${baseUrl}/verifyPassword?key=${key}`;
        }
        
        axios.post(
            url,
            authData
        ).then(response => {
            
            const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);
            localStorage.setItem('token', response.data.idToken);
            localStorage.setItem('expirationDate', expirationDate);
            localStorage.setItem('userId', response.data.localId);

            dispatch(authSuccess(
                response.data.idToken,
                response.data.localId // localId is used as userId
            ));
            dispatch(checkAuthTimeout(
                response.data.expiresIn
            ));
        }).catch(error => {
            dispatch(authFail(error.response.data.error));
        })
    };
};